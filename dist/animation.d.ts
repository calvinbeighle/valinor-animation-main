type AnimationState = 'vertical-center' | 'moving-left' | 'moving-right' | 'hexagon' | 'rotating';
interface IconElement {
    element: HTMLElement;
    id: string;
}
declare class ValinorAnimation {
    private container;
    private hexagonGroup;
    private statusElement;
    private icons;
    private animationState;
    private isAnimating;
    private animationId;
    private startTime;
    private radius;
    private centerX;
    private centerY;
    private contentBoundaries;
    private ghostIcons;
    private originalPositions;
    private webCanvas;
    private webCtx;
    private webLines;
    private webAnimationId;
    private webStartTime;
    private isWebAnimating;
    private completedWebLines;
    private isAuraAnimating;
    private auraAnimationId;
    private auraStartTime;
    private isComputerAnimating;
    private computerAnimationId;
    private computerStartTime;
    private computerContent;
    private currentCodeLine;
    private currentPhase;
    private currentQuestion;
    private waitingForResponse;
    private responseDelay;
    private toolCalls;
    private codeSnippets;
    private questions;
    private responses;
    constructor();
    private initializeIcons;
    private setupEventListeners;
    private initializeWebCanvas;
    private initializeVerticalFormation;
    private transitionToLeftPosition;
    private transitionToRightPosition;
    private transitionToHexagon;
    private getVisualCenterOffset;
    private createGhostIcon;
    private addContentBoundaryIndicator;
    updateStatus(message: string): void;
    private animateOrbit;
    private easeInOutQuint;
    startAnimation(): void;
    resetAnimation(): void;
    getState(): AnimationState;
    isInProgress(): boolean;
    private startWebAnimation;
    private createWebLines;
    private generateContinuousWebPath;
    private animateWeb;
    private drawWebLine;
    private clearWebCanvas;
    private startComputerAnimation;
    private animateComputer;
    private updatePhaseProgress;
    private updateComputerDisplay;
    private createCycleDisplay;
    private highlightSyntax;
    private updateComputerContent;
    private startTypingAnimation;
    private delay;
}
export { ValinorAnimation };
export type { AnimationState, IconElement };
//# sourceMappingURL=animation.d.ts.map